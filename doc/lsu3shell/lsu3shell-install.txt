Installation instructions for lsu3shell package for use with spncci

+ 4/13/16 (mac): Written for use with University of Notre Dame CRC
    Linux cluster. First new build in a couple of years, with lots of
    new modules.
+ 9/5/16 (mac): Cut out old notes and notes on experimentation for 4/13 
    commit, and update config-ndcrc.mk.
+ 9/16/16 (mac): Update to lsu3shell 9/15 commit (de8ba2).  Remove instruction
    to update makefile.
+ 11/8/16 (mac): Paste in Anna's note from spncci/install_NDCRC.txt.
+ 11/17/16 (mac): Update to lsu3shell 11/13/16 commit (56981f) and
    current spncci config files (93ec11).
+ 12/22/16 (mac): Revise to serve as generic instructions across clusters,
  following shell/spncci project install.txt.

----------------------------------------------------------------

The compiler and library dependences for LSU3shell are similar to
those for the shell/spncci projects, so please refer to the discussion
in the install.txt file found under the shell/spncci project.
Additional dependences here for LSU3shell are: use of ompi and use of
a LAPACK-like library (e.g., MKL or ACML).

1) Retrieving source

  Change to the directory where you want the repository to be installed,
  e.g.,

  % cd ~/projects

  To clone a clean repository and check out the LSU3develop branch:
  
  % git clone git://git.code.sf.net/p/lsu3shell/code lsu3shell --branch LSU3develop
  
  If you forget to check out the LSU3develop branch when you first do
  this checkout, you can go back and do:

  % git checkout -b LSU3develop origin/LSU3develop

  Then change your working directory (cd) to the project directory for
  all the following steps.

1') Further optional repository configuration
  
  Optionally (for local development work at ND), set up access to the ND
  CRC repository:
  
  % git remote add ndcrc ssh://<netid>@crcfe01.crc.nd.edu/afs/crc.nd.edu/group/nuclthy/git/lsu3shell.git
  
  Optionally (for maintainers with push permission at SourceForge only),
  set up the correct URL for pushing changes:
  
  % git remote set-url origin --push ssh://<userid>@git.code.sf.net/p/lsu3shell/code

2') Config files

  You need to create a symbolic link "config.mk" to point to the
  correct configuration file.  

  However, beware that an outdated irrelevant "config.mk" file comes
  with the repository.  We need to delete this and then create a
  symbolic link "config.mk" to point to the correct configuration
  file, taken from spncci/doc/lsu3shell/config.

  || @NDCRC: For compiling under gcc:
  || 
  ||   % rm config.mk
  ||   % ln -s ${HOME}/projects/spncci/doc/lsu3shell/config
  ||   % ln -s config/config-gnu-ndcrc.mk config.mk

  || @NERSC: For compiling under gcc:
  || 
  ||   % rm config.mk
  ||   % ln -s ${HOME}/projects/spncci/doc/lsu3shell/config
  ||   % ln -s config/config-gnu-nersc.mk config.mk

  Note: Some, but perhaps not all, of these system-specific wrapper
  files will actually be symlinks to the system-specific wrapper files
  in spncci/config.

3) Build

  It is first necessary to carry out the module load or setenv
  commands needed to access the various libraries, as described in
  the shell/spncci install.txt.

  Recall that, as a shortcut, it is convenient to collect all the
  above module loads and setenv commands into a single file, which can
  be sourced before attempting a build:

  % source ~/projects/spncci/config/module-load-<my_system>.csh

  || @NDCRC:
  || 
  || % source config/module-load-ndcrc.csh

  || @NERSC: To compile under gnu...
  || 
  || % module swap PrgEnv-intel PrgEnv-gnu
  || % source config/module-load-nersc.csh

  Note: Some, but perhaps not all, of these system-specific module
  load scripts will actually be symlinks to the module load scripts in
  spncci/config.

  Once the configuration files are set as described below, the build
  command line sequence is:

  % make install -j 8

  || @NERSC: We need to keep binaries for different architectures
  || separate.  The files will be installed to
  || install/$(CRAY_CPU_TARGET)/bin, e.g., install/haswell/bin or
  || install/mic-knl/bin.

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Detailed notes on setup at NDCRC
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
// gcc / ompi / boost
////////////////////////////////////////////////////////////////

It is necessary to have consistent installations of gcc, ompi (set
up to use that gcc), and boost (compiled with that gcc).  A consistent
set of modules was installed for us at the CRC (4/16), making use of:

    gcc 4.9.2
    ompi 1.10.2
    boost 1.58

These are loaded with:

  module load ompi/1.10.2-gcc-4.9.2
  module load boost/1.58

We must be careful to set the corresponding FORTRAN library flags
in config.mk.  From an ls of /opt/crc/o/openmpi/1.10.2/gcc/4.9.2/lib,
we find the possibilities

  libmpi_mpifh

A successful build is obtained with

  fortran_libs :=  -lmpi_mpifh -lgfortran

For future reference, we note the module settings:

  module show ompi/1.10.2-gcc-4.9.2
  -------------------------------------------------------------------
  /afs/crc.nd.edu/x86_64_linux/Modules/modules/development_tools_and_libraries/ompi/1.10.2-gcc-4.9.2:

  prepend-path     PATH /opt/crc/o/openmpi/1.10.2/gcc/4.9.2/bin 
  append-path      MANPATH /opt/crc/o/openmpi/1.10.2/gcc/4.9.2/man 
  prepend-path     LD_LIBRARY_PATH /opt/crc/o/openmpi/1.10.2/gcc/4.9.2/lib 
  prepend-path     LD_LIBRARY_PATH /opt/crc/o/openmpi/1.10.2/gcc/4.9.2/lib/openmpi 
  module-whatis    

  The Open MPI Project is an open source MPI-2 implementation that is developed and maintained by a consortium of academic, research, and industry partners. 
  -------------------------------------------------------------------

  module show boost/1.58
  -------------------------------------------------------------------
  /afs/crc.nd.edu/x86_64_linux/Modules/modules/development_tools_and_libraries/boost/1.58:

  module           load gcc/4.9.2 
  module           load python/2.7.8 
  setenv           BOOST_ROOT /afs/crc.nd.edu/x86_64_linux/b/boost/1.58/gcc/4.9.2/build 
  prepend-path     PATH /afs/crc.nd.edu/x86_64_linux/b/boost/1.58/gcc/4.9.2/build 
  prepend-path     LD_LIBRARY_PATH /afs/crc.nd.edu/x86_64_linux/b/boost/1.58/gcc/4.9.2/build/lib 
  prepend-path     PATH /afs/crc.nd.edu/x86_64_linux/b/bertini/1.5/gcc/4.9.2/openmpi/1.8.8/bin 
  prepend-path     LD_LIBRARY_PATH /afs/crc.nd.edu/x86_64_linux/b/bertini/1.5/gcc/4.9.2/openmpi/1.8.8/lib 
  module-whatis    

  Boost provides free peer-reviewed portable C++ source libraries. Boost emphasizes libraries that work well with the C++ Standard Library. Boost libraries are intended to be widely useful, and usable across a broad spectrum of applications.

  Use of high-quality libraries like Boost speeds initial development, results in fewer bugs, reduces reinvention-of-the-wheel, and cuts long-term maintenance costs. And since Boost libraries tend to become de facto or de jure standards, many programmers are already familiar with them. 
  -------------------------------------------------------------------

////////////////////////////////////////////////////////////////
// GSL
////////////////////////////////////////////////////////////////

The gsl module defines GSL_DIR as pointing to the base directory.
Thus, in config.mk, this base directory ${GSL_DIR} should included in
the search_prefix list.

  module load gsl

////////////////////////////////////////////////////////////////
// Eigen
////////////////////////////////////////////////////////////////

Install Eigen manually, as described in general installation
instructions for shell/spncci.

   setenv EIGEN3_DIR /afs/crc.nd.edu/group/nuclthy/opt/eigen-3.2.10

How this is used in the config.mk: The "standard" convention, which we
use in the shell/spncci projects (following the convention set by
NERSC's eigen3 mdoule) would be to simply include ${EIGEN3_DIR} in the
search_prefix path.  Then include directives would have to be of the
form

   #include "eigen3/Eigen/Dense"

However, in the LSU3shell code, the include directives are of the form

   #include "Eigen/Dense"

To get these to work, we must instead make use of the
search_dirs_include path, and put $(EIGEN3_DIR)/include/eigen3 in this
path.

////////////////////////////////////////////////////////////////
// Optimized BLAS (MKL or ACML)
////////////////////////////////////////////////////////////////

The BLAS/LAPACK routines are used for the matrix operations in the
MFDn eigensolver (libraries/eigensolver_MFDn).

If all we care about is *compiling* lsu3shell for its libraries, and
we do not actually care about the performance of the eigensolver, we
can get away with linking to the generic LAPACK:

   LDLIBS += -llapack

This is installed on the CRC for the GNU compilers under

   /afs/crc.nd.edu/x86_64_linux/scilib/lapack/gnu

so we must add this to search_dirs_lib.  See
http://wiki.crc.nd.edu/wiki/index.php/LAPACK.

Otherwise, if we do care about using a vendor-optimized linear algebra
library, both ACML (for AMD machines) and MKL (for Intel machines) are
installed at the ND CRC.  The shared object libraries produce a
linking error.  Therefore, we must force use of static libraries in
the su3shell makefile.  The ugly way to do this, in config.mk, is to
set

  LDLIBS += /afs/crc.nd.edu/x86_64_linux/scilib/acml/current/gfortran/gfortran64/lib/libacml.a

----------------------------------------------------------------

Notes:

11/17/16 (mac): Builds okay but get library version warnings (on crcfe01)

   /usr/bin/ld: warning: libmpi.so.1, needed by /afs/crc.nd.edu/x86_64_linux/b/boost/1.58/gcc/4.9.2/build/lib/libboost_mpi.so, may conflict with libmpi.so.12

11/22/16 (aem): Need to set environment variable SU3SHELL_DATA to path to file where the densities etc. can be written to. 
