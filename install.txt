Installation notes for spncci

  3/7/16 (aem,mac): Created.
  4/19/16 (mac): Update.
  5/3/16 (mac): Update.
  5/17/16 (mac): Overhaul instructions.  Update repository location and branch.

----------------------------------------------------------------

Basic installation

--------

1) Retrieving source

  git clone --recursive ssh://crcfe01.crc.nd.edu/scratch365/mcaprio/git/spncci.git

  Or, locally on the ND CRC,

  git clone --recursive /afs/crc.nd.edu/group/nuclthy/git/spncci.git

Then switch to the desired development branch, e.g.,

  git checkout devel

There are sometimes issues with retrieving the correct commit of the
am subpackage.  If issues arise...

  cd libraries/am
  git fetch
  git merge origin/master

Under newer versions of git, you should instead be able to use...

  git submodule update --remote

--------


2) Compiler

Make sure the appropriate compiler suite is available.  The full C++11
functionality is required.  With gcc, version 4.4 is known to
be "too old".  Current testing is with versions 4.9..5.3.

--------

3) Libraries

Eigen: The Eigen 3 library is required.  If it is not available via a
module load, you may need to install it locally and add this path to
config.mk.  Note that no compilation is required.  Eigen is a template
library and consists entirely of header files.

Example:

   (1) We assume you have downloaded the distribution archive for
   Eigen 3.2.7 (eigen-eigen-b30b87236a1b.tar.gz) and that it is in
   your current working directory...

   (2) We are installing beneath your home directory, in
   $HOME/local/opt/eigen-3.2.7

   % tar xvf eigen-eigen-b30b87236a1b.tar.gz
   % mkdir --parents $HOME/local/opt/eigen-3.2.7/include/eigen3
   % mv eigen-eigen-b30b87236a1b/Eigen $HOME/local/opt/eigen-3.2.7/include/eigen3/
   % rm -r eigen-eigen-b30b87236a1b

Then set the search_prefix in config.mk to include this directory...

That is, if the eigen include files are

     $(HOME)/local/opt/eigen-3.2.7/include/eigen3/Eigen/{Array,Cholesky,...,Eigen,...}

then the search prefix list should include

     $(HOME)/local/opt/eigen-3.2.7

Thus, in config.mk, we should have

  # search prefix
  #
  #   additional path to search for required include and lib 
  #   directories
  #

  search_prefix := $(HOME)/local/opt/eigen-3.2.7

GSL: Make sure GSL is accessible, and that its path is properly
 specified in config.mk.

  On the ND CRC, a module load sets GSL_DIR to point to the proper
  base directory.

Boost: Boost is used for the functional/hash module.  You need a
version which is new enough to provide a hash_value specialization for
std::tuple.  Version 1.58 is known to work.

  On the ND CRC, a module load sets BOOST_ROOT to point to the proper
  base directory.

--------

4) config.mk

You will need to set up a config.mk file, likely based on the provided
template (which you may, in fact, be able to use directly).

An example file config_generic-gcc4.mk is provided.  If you are using
GCC, you can start by simply copying this example file to config.mk.
Or better, use a symbolic link:

   ln -s config_generic-gcc4.mk config.mk

That way, any updates to the generic config file will automatically be
reflected.

For the ND CRC, the file config_ndcrc-gcc4.mk "includes" this generic
config file and then adds some search path entries, so you will want
to use:

   ln -s config_ndcrc-gcc4.mk config.mk

--------

5) Modules

At compile time, you may need to load modules to access the above
compiler versions or libraries.

  As a shortcut on the ND CRC, the current module definitions are
  maintained in module-load-ndcrc.csh.  This needs to be *sourced*
  into csh (not run as a script) so that the environment variable
  definitions provided by these modules are retained:

  source module-load-ndcrc.csh

--------

6) Build

  make all

----------------------------------------------------------------

General issues

--------

Static linking

Initially, we used static linking, but this is now turned off in the
example config.mk file.  The line for static linking is

   CXXFLAGS += -static

However, the relevant static libraries are often not available.  For
instance, if you encounter the error "cannot find -lm", then the math
libraries are not available for static linking on your
installation.

--------

Compiling under OSX

Static linking to system libraries is problematic.  Cannot static link
against libcrt0.  So do not include -static compiler flag in
config.mk.

g++ may not automatically find boost under /usr/local/{include,lib}.
If so, add /usr/local to search_prefix in config.mk.

To install boost:

  brew install boost

Updating g++:

  brew install gcc --use-llvm

