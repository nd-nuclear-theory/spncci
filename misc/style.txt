Style notes for spncci project

Anna E. McCoy and Mark A. Caprio
University of Notre Dame

----------------------------------------------------------------

Coding generally follows the Google C++ style guidelines:

  https://google.github.io/styleguide/cppguide.html

Indenting follows emacs C++ mode "gnu" mode conventions.  To disable
tabs in emacs, the following code may be included in your emacs
init.el file:

  (setq-default indent-tabs-mode nil)

For more information, see:

  https://www.emacswiki.org/emacs/IndentingC

----------------------------------------------------------------

Namespaces

  Avoid using "using" declarations.

  Even though namespace qualifiers are not strictly needed when you
  are accessing an identifier from the same namespace, go ahead and
  consistently use namespace qualifiers anyway, for readability.

Half-integer values

  Use the HalfInt type, rather than explicitly storing twice the
  value in an integer variable, as many physics codes do.

  Convert HalfInt back to int/double as needed using the int() or
  double() conversions, rather than the other more verbose accessors
  (which were defined pre-C++11).  You might also use the
  TwiceValue(h) function if you actually need the integer equal to
  twice the HalfInt's value.

  When a half-integer variable is stored to file, do go ahead and
  store it as an integer equal to twice the value.  If this
  input/output value must be temporarily stored in an integer
  variable, use a name of the form "twice_x".

Text input

  Use the utilities/parsing functions for uniform error messages.

Class declarations

  Note on use of "inline" keyword: Some member functions defined in
  class declarations start with a superfluous "inline" keyword.  This
  is purely as a workaround for a bug in the emacs C++ mode
  indentation, which causes incorrect indentation when a constructor
  initializer is present.

  We use a Str() member function (a la Python) to generate a simple
  text representation of an object (e.g., a group label), as might be
  used in production output.

  We use a DebugStr() member function to generate a data dump of an
  object, as might be used in debugging and testing.
